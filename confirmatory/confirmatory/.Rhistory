r.squaredGLMM(modelunt)
#Determine R2:
r.squaredGLMM(modellog)
p1 <- ggplot(all,aes(x=avg_slopes,y=prepost_convergence, color = as.factor(target))) + geom_point(aes(group=pair))+geom_smooth(method='lm', alpha = 0, size = 0.7)+geom_smooth(method='lm', alpha=0.5, color = 'black')+ylab("convergence relative to pre")+ggtitle("Confirmatory: Average slope and convergence")+theme_bw()+ scale_color_manual(values = my_custom_palette)
p1
# Exploratory for convergence
model1 <- lmer(prepost_convergence~(1|target)+(1|pair)+avg_slopes,data=all)
summary(model1)
\model1 <- lmer(pre~ges_intercept+trans_intercept+f0_intercept+env_intercept+(1|pair)+(1|target),data=all)
model1 <- lmer(pre~ges_intercept+trans_intercept+f0_intercept+env_intercept+(1|pair)+(1|target),data=all)
summary(model1)
model1 <- lmer(avg_dist~ges_slope+trans_slope+f0_slope+env_slope+(1|pair)+(1|target),data=all)
summary(model1)
model2 <- lmer(prepost_convergence~ges_slope+trans_slope+f0_slope+env_slope+(1|pair)+(1|target),data=all)
summary(model2)
model1 <- lmer(avg_dist~ges_slope+trans_slope+f0_slope+env_slope+(1|pair)+(1|target),data=all)
summary(model1)
model1 <- lmer(avg_dist~ges_intercept+trans_intercept+f0_intercept+env_intercept+(1|pair)+(1|target),data=all)
summary(model1)
model1 <- lmer(avg_dist~ges_intercept+trans_intercept+f0_intercept+env_intercept+(1|pair)+(1|target),data=all)
summary(model1)
model2 <- lmer(prepost_convergence~ges_intercept+trans_intercept+f0_intercept+env_intercept+(1|pair)+(1|target),data=all)
summary(model2)
model1 <- lmer(avg_dist~avg_intercepts+(1|pair)+(1|target),data=all)
summary(model1)
model1 <- lmer(avg_dist~ges_intercept+trans_intercept+f0_intercept+env_intercept+(1|pair)+(1|target),data=all)
summary(model1)
model1 <- lmer(prepost_convergence~avg_intercepts+(1|pair)+(1|target),data=all)
summary(model1)
model1 <- lmer(prepost_convergence~avg_intercepts+avg_slopes+(1|pair)+(1|target),data=all)
summary(model1)
model1 <- lmer(prepost_convergence~avg_intercepts*avg_slopes+(1|pair)+(1|target),data=all)
summary(model1)
vif(all$avg_intercepts, all$avg_slopes)
VIFvif(all$avg_intercepts, all$avg_slopes)
vif(all$avg_intercepts, all$avg_slopes)
cor.test(all$avg_intercepts, all$avg_slopes)
model1 <- lmer(pre~avg_intercepts+avg_slopes+(1|pair)+(1|target),data=all)
summary(model1)
model1 <- lmer(pre~avg_slopes+(1|pair)+(1|target),data=all)
summary(model1)
# possible interesting
cor.test(all$avg_intercepts, all$avg_slopes) #note
model1 <- lmer(prepost_convergence~avg_intercepts+avg_slopes+(1|pair)+(1|target),data=all)
summary(model1)
# possible interesting
model1 <- lmer(pre~avg_slopes+avg_intercepts+(1|pair)+(1|target),data=all)
summary(model1)
model1 <- lmer(predist~avg_slopes+avg_intercepts+(1|pair)+(1|target),data=all)
summary(model1)
# possible interesting more different
model1 <- lmer(pre~avg_slopes+avg_intercepts+(1|pair)+(1|target),data=all)
summary(model1)
model1 <- lmer(avg_dist~ges_intercept+trans_intercept+f0_intercept+env_intercept+(1|pair)+(1|target),data=all)
summary(model1)
model2 <- lmer(prepost_convergence~ges_intercept+trans_intercept+f0_intercept+env_intercept+(1|pair)+(1|target),data=all)
summary(model2)
model1 <- lmer(avg_dist~ges_intercept+trans_intercept+f0_intercept+env_intercept+ges_slope+trans_slope+f0_slope+env_slope+(1|pair)+(1|target),data=all)
summary(model1)
model1 <- lmer(pre~ges_intercept+trans_intercept+f0_intercept+env_intercept+(1|pair)+(1|target),data=all)
summary(model1)
model1 <- lmer(avg_dist~ges_slope+ges_intercept+(1|pair)+(1|target),data=all)
summary(model1)
model2 <- lmer(avg_dist~avg_intercepts*predist+(1|pair)+(1|target),data=all)
summary(model2)
#model2 <- lmer(prepost_convergence~avg_intercepts*predist+(1|pair)+(1|target),data=all)
model2 <- lmer(avg_dist~avg_intercepts+(1|pair)+(1|target),data=all)
summary(model2)
#model2 <- lmer(prepost_convergence~avg_intercepts*predist+(1|pair)+(1|target),data=all)
model2 <- lmer(prepost_convergence~avg_intercepts+(1|pair)+(1|target),data=all)
summary(model2)
#model2 <- lmer(prepost_convergence~avg_intercepts*predist+(1|pair)+(1|target),data=all)
model2 <- lmer(prepost_convergence~avg_intercepts*presit+(1|pair)+(1|target),data=all)
#model2 <- lmer(prepost_convergence~avg_intercepts*predist+(1|pair)+(1|target),data=all)
model2 <- lmer(prepost_convergence~avg_intercepts*predist+(1|pair)+(1|target),data=all)
summary(model2)
setwd("~/CABB_automated_analyses/confirmatory")
curfolder <- dirname(getwd())
outputfolder <- paste0(curfolder, "/preregistration/processed/")
# loglog/linear LMs intercepts/slopes
expl_final_mat<-read.csv(paste0(outputfolder,"mat_lm_prepost_centered_shift_one.csv"))
expl_final_mat_linear <- read.csv(paste0(outputfolder,"mat_lm_prepost_centered_linear.csv"))
# raw sum(energy) per pair
expl_energy <- read.csv(paste0(outputfolder,"energy.csv"))
# raw energy per participant
expl_mat_diff <- read.csv(paste0(outputfolder,"mat_diff.csv"))
# pre/post/visual centrality, average all the rest Fribbles for each Fribble (result in 1 x 16)
expl_centrality_all <- read.csv(paste0(outputfolder,"centrality_all.csv"))
# centrality in long format: post and pre distances
expl_rdm_pair_long <- read.csv(paste0(outputfolder,"rdm_pair_long.csv"))
# visual similarity 16 x 16 Fribbles
expl_vis_sim <- read.csv(paste0(outputfolder,"Ssim_RDM.csv"),header = F)
expl_vis_sim <- vis_sim[1:16,1:16]
expl_vis_sim[row(vis_sim)==col(vis_sim)] <- NA
# post/pre centrality
expl_rdm_mat <- read.csv(paste0(outputfolder,"rdm_mat_post.csv"))
expl_rdm_mat_pre <- read.csv(paste0(outputfolder,"rdm_mat_pre.csv"))
curfolder <- getwd()
outputfolder <- paste0(curfolder, "/output_large/")
# loglog/linear LMs intercepts/slopes
final_mat<-read.csv(paste0(outputfolder,"mat_lm_prepost_centered_shift_one.csv"))
final_mat_linear <- read.csv(paste0(outputfolder,"mat_lm_prepost_centered_linear.csv"))
# raw sum(energy) per pair
energy <- read.csv(paste0(outputfolder,"energy_n.csv"))
# raw energy per participant
mat_diff <- read.csv(paste0(outputfolder,"mat_diff.csv"))
# pre/post/visual centrality, average all the rest Fribbles for each Fribble (result in 1 x 16)
centrality_all <- read.csv(paste0(outputfolder,"centrality_all.csv"))
# centrality in long format: post and pre distances
rdm_pair_long <- read.csv(paste0(outputfolder,"rdm_pair_long.csv"))
# visual similarity 16 x 16 Fribbles
vis_sim <- read.csv(paste0(outputfolder,"Ssim_RDM.csv"),header = F)
vis_sim <- vis_sim[1:16,1:16]
vis_sim[row(vis_sim)==col(vis_sim)] <- NA
# post/pre centrality
rdm_mat <- read.csv(paste0(outputfolder,"rdm_mat_post.csv"))
rdm_mat_pre <- read.csv(paste0(outputfolder,"rdm_mat_pre.csv"))
library(readr)        #string manipulation
library(ggplot2)      #plotting
library(gridExtra)    #plotting
library(cowplot)      #plotting
library(colorRamps)   #plotting
library(RColorBrewer) #plotting
library(scales)       #rescaling
library(plotly)       #plotting
library(ggpubr)       #plotting
library(magrittr)     #pipe operator
library(lme4)         #lineat mixed modeling
library(ggcorrplot)   #plotting correlations
library(data.table)   #data wrangling
library(reshape2)     #data wrangling
library(plyr)         #data wrangling
library(dplR)         #data wrangling
library(dplyr)        #data wrangling
library(lmerTest)     #posthoc testing
library(simr)         #power analysis
library(tidyr)        #piping etc.
library(performance)  #model checks
library(jtools)       #for plotting interaction
library(ape)          #ape
expl_p2 <- ggplot(tmp,aes(x=round,y=log(avg_effort))) + geom_point(aes(colour=as.factor(pair), group=as.factor(pair)))+geom_smooth(method='loess', color='purple', alpha=0.1)+geom_smooth(method='lm', color='black')+scale_colour_discrete(name="Pair")+theme_cowplot()+ theme(legend.position = "none")+ scale_color_manual(values = my2_custom_palette)+scale_x_continuous(trans='log')+scale_x_continuous(trans='log', name="log (round)", breaks=c(1:6))
expl_p2
tmp <- expl_mat_diff
tmp$trial <- NULL
tmp<- tmp %>% group_by(round,pair) %>% summarise(avg_env=mean(peaks1+peaks2),avg_ges=mean(gesture1+gesture2),avg_trans=mean(transitions),avg_f0range=mean(range1+range2))
tmp[,c(3:6)] <- scale(tmp[,c(3:6)], center = FALSE) ### center = false DEVIATION from pre-reg
tmp$avg_effort <- rowMeans(tmp[,c(3:6)])
expl_p1 <- ggplot(tmp,aes(x=round,y=avg_effort)) + geom_point(aes(colour=as.factor(pair), group=as.factor(pair)))+ guides(colour="none")+geom_smooth(method='lm', color='black', alpha=0.1)+geom_smooth(method='loess', color='purple', alpha=0.1)+ylab("combined effort")+theme_cowplot()+ theme(legend.position = "none")+ scale_color_manual(values = my2_custom_palette)+scale_x_continuous(name="round", breaks=c(1:6))+
theme(legend.justification = "left")
expl_p2 <- ggplot(tmp,aes(x=round,y=log(avg_effort))) + geom_point(aes(colour=as.factor(pair), group=as.factor(pair)))+geom_smooth(method='loess', color='purple', alpha=0.1)+geom_smooth(method='lm', color='black')+scale_colour_discrete(name="Pair")+theme_cowplot()+ theme(legend.position = "none")+ scale_color_manual(values = my2_custom_palette)+scale_x_continuous(trans='log')+scale_x_continuous(trans='log', name="log (round)", breaks=c(1:6))
expl_p2
expl_p1 <- ggplot(tmp,aes(x=round,y=avg_effort)) + geom_point(aes(colour=as.factor(pair), group=as.factor(pair)))+ guides(colour="none")+geom_smooth(method='lm', color='black', alpha=0.1)+geom_smooth(method='loess', color='purple', alpha=0.1)+ylab("combined effort")+theme_cowplot()+ theme(legend.position = "none")+ scale_color_manual(values = my2_custom_palette)+scale_x_continuous(name="round", breaks=c(1:6))+
theme(legend.justification = "left")
expl_p1
parentfolder
curfolder
fnam <- paste0(dirname(curfolder),'/external_datasets/HawkinsFranketal2023_dataset/tangramsSequential.csv')
extdat <- read.csv(fnam)
# external dataset
fnam <- paste0(dirname(curfolder),'/confirmatory/external_datasets/HawkinsFranketal2023_dataset/tangramsSequential.csv')
extdat <- read.csv(fnam)
# external dataset
fnam <- paste0(dirname(curfolder),'/confirmatory/external_datasets/HawkinsFranketal2023_dataset/tangramsSequential.csv')
extdat <- read.csv(fnam)
p1 <- ggplot(extdat,aes(x=repetitionNum,y=numRawWords)) + geom_point(aes(colour=as.factor(gameid), group=as.factor(gameid)))+ guides(colour="none")+geom_smooth(method='lm', color='black', alpha=0.1)+geom_smooth(method='loess', color='purple', alpha=0.1)+ylab("combined effort")+theme_cowplot()+ theme(legend.position = "none")+ scale_color_manual(values = my2_custom_palette)+scale_x_continuous(name="round", breaks=c(1:6))+
theme(legend.justification = "left")
p1
p1 <- ggplot(extdat,aes(x=repetitionNum,y=numRawWords)) + geom_point(aes(colour=as.factor(gameid), group=as.factor(gameid)))
p1
p1 <- ggplot(extdat,aes(x=repetitionNum,y=numRawWords)) + geom_point(aes(colour=as.factor(gameid), group=as.factor(gameid)))+ guides(colour="none")+geom_smooth(method='lm', color='black', alpha=0.1)+geom_smooth(method='loess', color='purple', alpha=0.1)+ylab("combined effort")+theme_cowplot()+ theme(legend.position = "none")
p1
extdatav <- extdat  %>% group_by(repetitionNum,gameid) %>% summarise(avg_words=mean(numRawWords))
p1 <- ggplot(extdatav,aes(x=repetitionNum,y=avg_words)) + geom_point(aes(colour=as.factor(gameid), group=as.factor(gameid)))+ guides(colour="none")+geom_smooth(method='lm', color='black', alpha=0.1)+geom_smooth(method='loess', color='purple', alpha=0.1)+ylab("combined effort")+theme_cowplot()+ theme(legend.position = "none")+ scale_color_manual(values = my2_custom_palette)+scale_x_continuous(name="round", breaks=c(1:6))+
theme(legend.justification = "left")
p1
extdatav
ggplot(extdatav,aes(x=repetitionNum,y=avg_words) + geom_point
()
)
ggplot(extdatav,aes(x=repetitionNum,y=avg_words) + geom_point()
)
ggplot(extdatav,aes(x=repetitionNum,y=avg_words)) + geom_point()
ggplot(extdatav,aes(x=repetitionNum,y=avg_words)) + geom_point(aes(colour=as.factor(gameid), group=as.factor(gameid)))+ guides(colour="none")+geom_smooth(method='lm', color='black', alpha=0.1)+geom_smooth(method='loess', color='purple', alpha=0.1)+ylab("combined effort")+theme_cowplot()+ theme(legend.position = "none")
ggplot(extdatav,aes(x=repetitionNum,y=avg_words)) + geom_point(aes(colour=as.factor(gameid), group=as.factor(gameid)))+ guides(colour="none")+geom_smooth(method='lm', color='black', alpha=0.1)+geom_smooth(method='loess', color='purple', alpha=0.1)+ylab("combined effort")+theme_cowplot()+ theme(legend.position = "none")+ scale_color_manual(values = my2_custom_palette)+scale_x_continuous(name="round", breaks=c(1:6))+
theme(legend.justification = "left")
ggplot(extdatav,aes(x=repetitionNum,y=avg_words)) + geom_point(aes(colour=as.factor(gameid), group=as.factor(gameid)))+ guides(colour="none")+geom_smooth(method='lm', color='black', alpha=0.1)+geom_smooth(method='loess', color='purple', alpha=0.1)+ylab("combined effort")+theme_cowplot()+ theme(legend.position = "none")+ scale_color_manual(values = my2_custom_palette)+scale_x_continuous(name="repetitionNum", breaks=c(1:6))+
theme(legend.justification = "left")
ggplot(extdatav,aes(x=repetitionNum,y=avg_words)) + geom_point(aes(colour=as.factor(gameid), group=as.factor(gameid)))+ guides(colour="none")+geom_smooth(method='lm', color='black', alpha=0.1)+geom_smooth(method='loess', color='purple', alpha=0.1)+ylab("combined effort")+theme_cowplot()+ theme(legend.position = "none")+scale_x_continuous(name="repetitionNum", breaks=c(1:6))+
theme(legend.justification = "left")
p1 <- ggplot(extdatav,aes(x=repetitionNum,y=avg_words)) + geom_point(aes(colour=as.factor(gameid), group=as.factor(gameid)))+ guides(colour="none")+geom_smooth(method='lm', color='black', alpha=0.1)+geom_smooth(method='loess', color='purple', alpha=0.1)+ylab("average number of raw words")+theme_cowplot()+ theme(legend.position = "none")+scale_x_continuous(name="repetitionNum", breaks=c(1:6))+
theme(legend.justification = "left")
p1
p2 <- ggplot(extdatav,aes(x=repetitionNum,y=log(avg_words))) + geom_point(aes(colour=as.factor(gameid), group=as.factor(gameid)))+geom_smooth(method='loess', color='purple', alpha=0.1)+geom_smooth(method='lm', color='black', alpha=0.1)+ylab("log(combined effort)")+scale_colour_discrete(name="Pair")+theme_cowplot()+ theme(legend.position = "none")+ scale_color_manual(values = my2_custom_palette)+scale_x_continuous(trans='log')+scale_x_continuous(trans='log', name="log (round)", breaks=c(1:6))+
theme(legend.justification = "left")
p2
p2 <- ggplot(extdatav,aes(x=repetitionNum,y=log(avg_words))) + geom_point(aes(colour=as.factor(gameid), group=as.factor(gameid)))+geom_smooth(method='loess', color='purple', alpha=0.1)+geom_smooth(method='lm', color='black', alpha=0.1)+ylab("log(combined effort)")+scale_colour_discrete(name="Pair")+theme_cowplot()+ theme(legend.position = "none")+scale_x_continuous(trans='log')+scale_x_continuous(trans='log', name="log (round)", breaks=c(1:6))+
theme(legend.justification = "left"
)
p2 <- ggplot(extdatav,aes(x=repetitionNum,y=log(avg_words))) + geom_point(aes(colour=as.factor(gameid), group=as.factor(gameid)))+geom_smooth(method='loess', color='purple', alpha=0.1)+geom_smooth(method='lm', color='black', alpha=0.1)+ylab("log(combined effort)")+scale_colour_discrete(name="Pair")+theme_cowplot()+ theme(legend.position = "none")+scale_x_continuous(trans='log')+scale_x_continuous(trans='log', name="log (round)", breaks=c(1:6))+
theme(legend.justification = "left")
p2
p1 <- ggplot(extdatav,aes(x=repetitionNum,y=avg_words)) + geom_point(aes(colour=as.factor(gameid), group=as.factor(gameid)))+ guides(colour="none")+geom_smooth(method='lm', color='black', alpha=0.1)+geom_smooth(method='loess', color='purple', alpha=0.1)+ylab("average number of raw words")+theme_cowplot()+ theme(legend.position = "none")+scale_x_continuous(name="repetitionNum", breaks=c(1:6))+
theme(legend.justification = "left")
p2 <- ggplot(extdatav,aes(x=repetitionNum,y=log(avg_words))) + geom_point(aes(colour=as.factor(gameid), group=as.factor(gameid)))+geom_smooth(method='loess', color='purple', alpha=0.1)+geom_smooth(method='lm', color='black', alpha=0.1)+ylab("log(combined effort)")+scale_colour_discrete(name="Pair")+theme_cowplot()+ theme(legend.position = "none")+scale_x_continuous(trans='log')+scale_x_continuous(trans='log', name="log (round)", breaks=c(1:6))+
theme(legend.justification = "left")
grid.arrange(p1, p2)
grid.arrange(p1, p2 ,nrow= 1)
p1 <- ggplot(extdatav,aes(x=repetitionNum,y=avg_words)) + geom_point(aes(group=as.factor(gameid)))+ guides(colour="none")+geom_smooth(method='lm', color='black', alpha=0.1)+geom_smooth(method='loess', color='purple', alpha=0.1)+ylab("average number of raw words")+theme_cowplot()+ theme(legend.position = "none")+scale_x_continuous(name="repetitionNum", breaks=c(1:6))+
theme(legend.justification = "left")
p2 <- ggplot(extdatav,aes(x=repetitionNum,y=log(avg_words))) + geom_point(aes(group=as.factor(gameid)))+geom_smooth(method='loess', color='purple', alpha=0.1)+geom_smooth(method='lm', color='black', alpha=0.1)+ylab("log(combined effort)")+scale_colour_discrete(name="Pair")+theme_cowplot()+ theme(legend.position = "none")+scale_x_continuous(trans='log')+scale_x_continuous(trans='log', name="log (round)", breaks=c(1:6))+
theme(legend.justification = "left")
grid.arrange(p1, p2 ,nrow= 1)
extdatav <- extdat  %>% group_by(repetitionNum,gameid) %>% summarise(avg_words=mean(numRawWords))
p1 <- ggplot(extdatav,aes(x=repetitionNum,y=avg_words)) + geom_point(aes(group=as.factor(gameid)))+ guides(colour="none")+geom_smooth(method='lm', color='black', alpha=0.1)+geom_smooth(method='loess', color='purple', alpha=0.1)+ylab("average number of raw words")+theme_cowplot()+ theme(legend.position = "none")+scale_x_continuous(name="repetitionNum", breaks=c(1:6))+
theme(legend.justification = "left")
p2 <- ggplot(extdatav,aes(x=repetitionNum,y=log(avg_words))) + geom_point(aes(group=as.factor(gameid)))+geom_smooth(method='loess', color='purple', alpha=0.1)+geom_smooth(method='lm', color='black', alpha=0.1)+ylab("log(combined effort)")+scale_colour_discrete(name="Pair")+theme_cowplot()+ theme(legend.position = "none")+scale_x_continuous(trans='log')+scale_x_continuous(trans='log', name="log (number of repetitions)", breaks=c(1:6))+
theme(legend.justification = "left")
grid.arrange(p1, p2 ,nrow= 1)
p1 <- ggplot(extdatav,aes(x=repetitionNum,y=avg_words)) + geom_point(aes(group=as.factor(gameid)))+ guides(colour="none")+geom_smooth(method='lm', color='black', alpha=0.1)+geom_smooth(method='loess', color='purple', alpha=0.1)+ylab("average number of raw words")+theme_cowplot()+ theme(legend.position = "none")+scale_x_continuous(name="number of repetitions", breaks=c(1:6))+
theme(legend.justification = "left")
p2 <- ggplot(extdatav,aes(x=repetitionNum,y=log(avg_words))) + geom_point(aes(group=as.factor(gameid)))+geom_smooth(method='loess', color='purple', alpha=0.1)+geom_smooth(method='lm', color='black', alpha=0.1)+ylab("log(combined effort)")+scale_colour_discrete(name="Pair")+theme_cowplot()+ theme(legend.position = "none")+scale_x_continuous(trans='log')+scale_x_continuous(trans='log', name="log (number of repetitions)", breaks=c(1:6))+
theme(legend.justification = "left")
grid.arrange(p1, p2 ,nrow= 1)
p1 <- ggplot(extdatav,aes(x=repetitionNum,y=avg_words)) + geom_point(aes(group=as.factor(gameid)))+ guides(colour="none")+geom_smooth(method='lm', color='black', alpha=0.1)+geom_smooth(method='loess', color='purple', alpha=0.1)+ylab("average number of raw words")+theme_cowplot()+ theme(legend.position = "none")+scale_x_continuous(name="number of repetitions", breaks=c(1:6))+
theme(legend.justification = "left")
p2 <- ggplot(extdatav,aes(x=repetitionNum,y=log(avg_words))) + geom_point(aes(group=as.factor(gameid)))+geom_smooth(method='loess', color='purple', alpha=0.1)+geom_smooth(method='lm', color='black', alpha=0.1)+ylab("log(average number of raw words)")+scale_colour_discrete(name="Pair")+theme_cowplot()+ theme(legend.position = "none")+scale_x_continuous(trans='log')+scale_x_continuous(trans='log', name="log (number of repetitions)", breaks=c(1:6))+
theme(legend.justification = "left")
grid.arrange(p1, p2 ,nrow= 1)
lenght(unique(extdat$gameid))
length(unique(extdat$gameid))
#test R squared for mixed regression model
modelunt <- lmer(avg_words~repetitionNum+(1|gameid),data=extdatav)
summary(modelunt)
extdatav$avg_wordsl <- log(avg_words)
#test R squared for mixed regression model
modelunt <- lmer(avg_words~repetitionNum+(1|gameid),data=extdatav)
summary(modelunt)
extdatav$avg_wordsl <- log(avg_words)
#test R squared for mixed regression model
modelunt <- lmer(avg_words~repetitionNum+(1|gameid),data=extdatav)
summary(modelunt)
extdatav$avg_wordsl <- log(extdatav$avg_words)
extdatav$repetitionNuml <- log(extdatav$repetitionNum)
#test R squared for mixed regression model
modellog <- lmer(avg_wordsl~repetitionNuml+(1|gameid),data=extdatav)
summary(modellog)
#Determine R2:
r.squaredGLMM(modelunt)
extdatav$avg_words
#test R squared for mixed regression model
modelunt <- lmer(avg_words~repetitionNum+(1|gameid),data=extdatav)
summary(modelunt)
extdatav$avg_wordsl <- log(extdatav$avg_words)
extdatav$repetitionNuml <- log(extdatav$repetitionNum)
#test R squared for mixed regression model
lmer(avg_wordsl~repetitionNuml+(1|gameid),data=extdatav)
summary(modellog)
r.squaredGLMM(modelunt)
library(MuMIn)
library(MuMIn)
#test R squared for mixed regression model
modelunt <- lmer(avg_words~repetitionNum+(1|gameid),data=extdatav)
summary(modelunt)
extdatav$avg_wordsl <- log(extdatav$avg_words)
extdatav$repetitionNuml <- log(extdatav$repetitionNum)
#test R squared for mixed regression model
modellog <- lmer(avg_wordsl~repetitionNuml+(1|gameid),data=extdatav)
summary(modellog)
#Determine R2:
r.squaredGLMM(modelunt)
#Determine R2:
r.squaredGLMM(modellog)
modelunt <- lmer(avg_words~repetitionNum+(1|gameid),data=extdatav)
summary(modelunt)
modellog <- lmer(avg_wordsl~repetitionNuml+(1|gameid),data=extdatav)
summary(modellog)
# Exploratory
library(MuMIn)
tmp <- expl_mat_diff
tmp$File <- NULL
tmp<- tmp %>% group_by(round,pair) %>% summarise(avg_env=mean(peaks1+peaks2),avg_ges=mean(gesture1+gesture2),avg_trans=mean(transitions),avg_f0range=mean(range1+range2))
tmp[,c(3:6)] <- scale(tmp[,c(3:6)], center = FALSE) # DEVIATION pre-registration
tmp$avg_effort <- rowMeans(tmp[,c(3:6)])
#test R squared for mixed regression model
modelunt <- lmer(avg_effort~round+(1|pair),data=tmp)
summary(modelunt)
tmp$avg_effortl <- log(tmp$avg_effort)
tmp$roundl <- log(tmp$round)
#test R squared for mixed regression model
modellog <- lmer(avg_effortl~roundl+(1|pair),data=tmp)
summary(modellog)
#test R squared for mixed regression model
modellog <- lmer(avg_effortl~roundl+(1|pair),data=tmp)
summary(modellog)
# external dataset
fnam <- paste0(dirname(curfolder),'/confirmatory/external_datasets/HawkinsFranketal2023_dataset/tangramsSequential.csv')
extdat <- read.csv(fnam)
extdatav <- extdat  %>% group_by(repetitionNum,gameid) %>% summarise(avg_words=mean(numRawWords))
p1 <- ggplot(extdatav,aes(x=repetitionNum,y=avg_words)) + geom_point(aes(group=as.factor(gameid)))+ guides(colour="none")+geom_smooth(method='lm', color='black', alpha=0.1)+geom_smooth(method='loess', color='purple', alpha=0.1)+ylab("average number of raw words")+theme_cowplot()+ theme(legend.position = "none")+scale_x_continuous(name="number of repetitions", breaks=c(1:6))+
theme(legend.justification = "left")
p2 <- ggplot(extdatav,aes(x=repetitionNum,y=log(avg_words))) + geom_point(aes(group=as.factor(gameid)))+geom_smooth(method='loess', color='purple', alpha=0.1)+geom_smooth(method='lm', color='black', alpha=0.1)+ylab("log(average number of raw words)")+scale_colour_discrete(name="Pair")+theme_cowplot()+ theme(legend.position = "none")+scale_x_continuous(trans='log')+scale_x_continuous(trans='log', name="log (number of repetitions)", breaks=c(1:6))+
theme(legend.justification = "left")
grid.arrange(p1, p2 ,nrow= 1)
#test R squared for mixed regression model
modelunt <- lmer(avg_words~repetitionNum+(1|gameid),data=extdatav)
summary(modelunt)
extdatav$avg_wordsl <- log(extdatav$avg_words)
extdatav$repetitionNuml <- log(extdatav$repetitionNum)
#test R squared for mixed regression model
modellog <- lmer(avg_wordsl~repetitionNuml+(1|gameid),data=extdatav)
summary(modellog)
#Determine R2:
r.squaredGLMM(modelunt)
#Determine R2:
r.squaredGLMM(modellog
#Determine R2:
r.squaredGLMM(modellog)
#Determine R2:
r.squaredGLMM(modellog)
library(MuMIn)
tmp <- mat_diff
tmp$File <- NULL
tmp<- tmp %>% group_by(round,pair) %>% summarise(avg_env=mean(peaks1+peaks2),avg_ges=mean(gesture1+gesture2),avg_trans=mean(transitions),avg_f0range=mean(range1+range2))
tmp[,c(3:6)] <- scale(tmp[,c(3:6)], center = FALSE) # DEVIATION pre-registration
tmp$avg_effort <- rowMeans(tmp[,c(3:6)])
#test R squared for mixed regression model
modelunt <- lmer(avg_effort~round+(1|pair),data=tmp)
summary(modelunt)
tmp$avg_effortl <- log(tmp$avg_effort)
tmp$roundl <- log(tmp$round)
#test R squared for mixed regression model
modellog <- lmer(avg_effortl~roundl+(1|pair),data=tmp)
summary(modellog)
#test R squared for mixed regression model
modelunt <- lmer(avg_effort~round+(1|pair),data=tmp)
summary(modelunt)
r.squaredGLMM(modelunt)
#Determine R2:
r.squaredGLMM(modellog)
# external dataset
fnam <- paste0(dirname(curfolder),'/confirmatory/external_datasets/HawkinsFranketal2023_dataset/tangramsSequential.csv')
extdat <- read.csv(fnam)
extdatav <- extdat  %>% group_by(repetitionNum,gameid) %>% summarise(avg_words=mean(numRawWords))
p1 <- ggplot(extdatav,aes(x=repetitionNum,y=avg_words)) + geom_point(aes(group=as.factor(gameid)))+ guides(colour="none")+geom_smooth(method='lm', color='black', alpha=0.1)+geom_smooth(method='loess', color='purple', alpha=0.1)+ylab("average number of raw words")+theme_cowplot()+ theme(legend.position = "none")+scale_x_continuous(name="number of repetitions", breaks=c(1:6))+
theme(legend.justification = "left")
p2 <- ggplot(extdatav,aes(x=repetitionNum,y=log(avg_words))) + geom_point(aes(group=as.factor(gameid)))+geom_smooth(method='loess', color='purple', alpha=0.1)+geom_smooth(method='lm', color='black', alpha=0.1)+ylab("log(average number of raw words)")+scale_colour_discrete(name="Pair")+theme_cowplot()+ theme(legend.position = "none")+scale_x_continuous(trans='log')+scale_x_continuous(trans='log', name="log (number of repetitions)", breaks=c(1:6))+
theme(legend.justification = "left")
grid.arrange(p1, p2 ,nrow= 1)
#test R squared for mixed regression model
modelunt <- lmer(avg_words~repetitionNum+(1|gameid),data=extdatav)
summary(modelunt)
extdatav$avg_wordsl <- log(extdatav$avg_words)
extdatav$repetitionNuml <- log(extdatav$repetitionNum)
#test R squared for mixed regression model
modellog <- lmer(avg_wordsl~repetitionNuml+(1|gameid),data=extdatav)
summary(modellog)
tmp_mat <- final_mat
tmp_mat[,c(3:14)] <- scale(tmp_mat[,c(3:14)])
tmp_mat$avg_intercepts <- rowMeans(tmp_mat[,c("trans_intercept","env_intercept","ges_intercept","f0_intercept")])
tmp_mat$avg_slopes <- rowMeans(tmp_mat[,c("trans_slope","env_slope","ges_slope","f0_slope")])
all <- left_join(tmp_mat[,c(1:16)],energy[,c(1,2,8)],by=c("pair","target"))
all<- left_join(all,rdm_pair_long[,c(1:3)],by=c("pair","target"="fribble"))
# rename variable so that they are not confusing
colnames(all)[colnames(all) == "prepost_change"] <- "prepost_convergence"
# do the same for exploratory dataset
expl_tmp_mat <- expl_final_mat
expl_tmp_mat[,c(3:14)] <- scale(expl_tmp_mat[,c(3:14)])
expl_tmp_mat$avg_intercepts <- rowMeans(expl_tmp_mat[,c("trans_intercept","env_intercept","ges_intercept","f0_intercept")])
expl_tmp_mat$avg_slopes <- rowMeans(expl_tmp_mat[,c("trans_slope","env_slope","ges_slope","f0_slope")])
expl_all <- left_join(expl_tmp_mat[,c(1:16)],expl_energy[,c(1,2,8)],by=c("pair","target"))
expl_all<- left_join(expl_all,expl_rdm_pair_long[,c(1:3)],by=c("pair","target"="fribble"))
# rename variable so that they are not confusing
colnames(expl_all)[colnames(expl_all) == "prepost_change"] <- "prepost_convergence"
```
model1 <- lmer(avg_dist~(1|target)+(1|pair)+avg_slopes,data=all)
summary(model1)
# Exploratory for convergence
model1 <- lmer(prepost_convergence~(1|target)+(1|pair)+avg_slopes,data=all)
summary(model1)
```
# Exploratory for convergence
model1 <- lmer(prepost_change~(1|target)+(1|pair)+avg_slopes,data=all)
all$model1 <- lmer(avg_dist~(1|target)+(1|pair)+avg_slopes,data=all)
model1 <- lmer(avg_dist~(1|target)+(1|pair)+avg_slopes,data=all)
summary(model1)
knitr::opts_chunk$set(echo=TRUE)
library(readr)        #string manipulation
library(ggplot2)      #plotting
library(gridExtra)    #plotting
library(cowplot)      #plotting
library(colorRamps)   #plotting
library(RColorBrewer) #plotting
library(scales)       #rescaling
library(plotly)       #plotting
library(ggpubr)       #plotting
library(magrittr)     #pipe operator
library(lme4)         #lineat mixed modeling
library(ggcorrplot)   #plotting correlations
library(data.table)   #data wrangling
library(reshape2)     #data wrangling
library(plyr)         #data wrangling
library(dplR)         #data wrangling
library(dplyr)        #data wrangling
library(lmerTest)     #posthoc testing
library(simr)         #power analysis
library(tidyr)        #piping etc.
library(performance)  #model checks
library(jtools)       #for plotting interaction
library(ape)          #ape
library(MuMIn)
curfolder <- getwd()
outputfolder <- paste0(curfolder, "/output_large/")
# loglog/linear LMs intercepts/slopes
final_mat<-read.csv(paste0(outputfolder,"mat_lm_prepost_centered_shift_one.csv"))
final_mat_linear <- read.csv(paste0(outputfolder,"mat_lm_prepost_centered_linear.csv"))
# raw sum(energy) per pair
energy <- read.csv(paste0(outputfolder,"energy_n.csv"))
# raw energy per participant
mat_diff <- read.csv(paste0(outputfolder,"mat_diff.csv"))
# pre/post/visual centrality, average all the rest Fribbles for each Fribble (result in 1 x 16)
centrality_all <- read.csv(paste0(outputfolder,"centrality_all.csv"))
# centrality in long format: post and pre distances
rdm_pair_long <- read.csv(paste0(outputfolder,"rdm_pair_long.csv"))
# visual similarity 16 x 16 Fribbles
vis_sim <- read.csv(paste0(outputfolder,"Ssim_RDM.csv"),header = F)
vis_sim <- vis_sim[1:16,1:16]
vis_sim[row(vis_sim)==col(vis_sim)] <- NA
# post/pre centrality
rdm_mat <- read.csv(paste0(outputfolder,"rdm_mat_post.csv"))
rdm_mat_pre <- read.csv(paste0(outputfolder,"rdm_mat_pre.csv"))
# make a color palette for 16 fribbles
my_custom_palette <- c("#1f78b4", "#33a02c", "#e31a1c", "#ff7f00", "#6a3d9a", "#a6cee3", "#b2df8a", "#fb9a99", "#fdbf6f", "#cab2d6", "#ffff99", "#b15928", "#8dd3c7", "#fb8072", "#80b1d3", "#bebada")
my2_custom_palette <- c("#1f78b4", "#33a02c", "#e31a1c", "#ff7f00", "#6a3d9a", "#a6cee3", "#b2df8a", "#fb9a99", "#fdbf6f", "#cab2d6", "#ffff99", "#b15928", "#8dd3c7", "#fb8072", "#80b1d3", "#bebada", "#377eb8", "#4daf4a", "#e41a1c", "#ff7f00", "#984ea3", "#a6cee3", "#b8e186", "#fc8d62", "#fdbf6f", "#8c510a", "#ffff99", "#d73027", "#4575b4", "#fc9272", "#91bfdb", "#d0d1e6", "#54278f", "#313695", "#fee08b", "#bd0026", "#66c2a5", "#393b79", "#637939", "#af8d12", "#d6616b", "#843c39", "#7b4173")
my3_custom_palette  <- c("#1a9641", "#a6d96a", "#fdae61", "#fee08b", "#e0f3f8", "#4575b4", "#313695", "#66c2a5", "#d73027", "#313695", "#74add1", "#4575b4", "#313695", "#e0f3f8", "#31a354", "#225ea8", "#253494", "#a6bddb", "#2171b5", "#238b45", "#fd8d3c")
curfolder <- dirname(getwd())
outputfolder <- paste0(curfolder, "/preregistration/processed/")
# loglog/linear LMs intercepts/slopes
expl_final_mat<-read.csv(paste0(outputfolder,"mat_lm_prepost_centered_shift_one.csv"))
expl_final_mat_linear <- read.csv(paste0(outputfolder,"mat_lm_prepost_centered_linear.csv"))
# raw sum(energy) per pair
expl_energy <- read.csv(paste0(outputfolder,"energy.csv"))
# raw energy per participant
expl_mat_diff <- read.csv(paste0(outputfolder,"mat_diff.csv"))
# pre/post/visual centrality, average all the rest Fribbles for each Fribble (result in 1 x 16)
expl_centrality_all <- read.csv(paste0(outputfolder,"centrality_all.csv"))
# centrality in long format: post and pre distances
expl_rdm_pair_long <- read.csv(paste0(outputfolder,"rdm_pair_long.csv"))
# visual similarity 16 x 16 Fribbles
expl_vis_sim <- read.csv(paste0(outputfolder,"Ssim_RDM.csv"),header = F)
expl_vis_sim <- vis_sim[1:16,1:16]
expl_vis_sim[row(vis_sim)==col(vis_sim)] <- NA
# post/pre centrality
expl_rdm_mat <- read.csv(paste0(outputfolder,"rdm_mat_post.csv"))
expl_rdm_mat_pre <- read.csv(paste0(outputfolder,"rdm_mat_pre.csv"))
####################Exploratory
tmp <- expl_mat_diff
tmp$trial <- NULL
tmp<- tmp %>% group_by(round,pair) %>% summarise(avg_env=mean(peaks1+peaks2),avg_ges=mean(gesture1+gesture2),avg_trans=mean(transitions),avg_f0range=mean(range1+range2))
tmp[,c(3:6)] <- scale(tmp[,c(3:6)], center = FALSE) ### center = false DEVIATION from pre-reg
tmp$avg_effort <- rowMeans(tmp[,c(3:6)])
expl_p1 <- ggplot(tmp,aes(x=round,y=avg_effort)) + geom_point(aes(colour=as.factor(pair), group=as.factor(pair)))+ guides(colour="none")+geom_smooth(method='lm', color='black', alpha=0.1)+geom_smooth(method='loess', color='purple', alpha=0.1)+ylab("combined effort")+theme_cowplot()+ theme(legend.position = "none")+ scale_color_manual(values = my2_custom_palette)+scale_x_continuous(name="round", breaks=c(1:6))+
theme(legend.justification = "left")
expl_p2 <- ggplot(tmp,aes(x=round,y=log(avg_effort))) + geom_point(aes(colour=as.factor(pair), group=as.factor(pair)))+geom_smooth(method='loess', color='purple', alpha=0.1)+geom_smooth(method='lm', color='black')+scale_colour_discrete(name="Pair")+theme_cowplot()+ theme(legend.position = "none")+ scale_color_manual(values = my2_custom_palette)+scale_x_continuous(trans='log')+scale_x_continuous(trans='log', name="log (round)", breaks=c(1:6))
A <- ggarrange(expl_p1,expl_p2)
# Confirmatory
tmp <- mat_diff
tmp$trial <- NULL
tmp<- tmp %>% group_by(round,pair) %>% summarise(avg_env=mean(peaks1+peaks2),avg_ges=mean(gesture1+gesture2),avg_trans=mean(transitions),avg_f0range=mean(range1+range2))
tmp[,c(3:6)] <- scale(tmp[,c(3:6)], center = FALSE) ### center = false DEVIATION from pre-reg
tmp$avg_effort <- rowMeans(tmp[,c(3:6)])
p1 <- ggplot(tmp,aes(x=round,y=avg_effort)) + geom_point(aes(colour=as.factor(pair), group=as.factor(pair)))+ guides(colour="none")+geom_smooth(method='lm', color='black', alpha=0.1)+geom_smooth(method='loess', color='purple', alpha=0.1)+ylab("combined effort")+theme_cowplot()+ theme(legend.position = "none")+ scale_color_manual(values = my2_custom_palette)+scale_x_continuous(name="round", breaks=c(1:6))+
theme(legend.justification = "left")
p2 <- ggplot(tmp,aes(x=round,y=log(avg_effort))) + geom_point(aes(colour=as.factor(pair), group=as.factor(pair)))+geom_smooth(method='loess', color='purple', alpha=0.1)+geom_smooth(method='lm', color='black', alpha=0.1)+ylab("log(combined effort)")+scale_colour_discrete(name="Pair")+theme_cowplot()+ theme(legend.position = "none")+ scale_color_manual(values = my2_custom_palette)+scale_x_continuous(trans='log')+scale_x_continuous(trans='log', name="log (round)", breaks=c(1:6))+
theme(legend.justification = "left")
B <- ggarrange(p1,p2)
plot_grid(A, B, align = "hv")
# does more effort in the beginning, predict lower effort at end
# Define parameters
initial_population <- 1000
max_generations <- 40
selection_constant <- 0.1 #Adjust as needed
# Function to calculate selection rate based on population size
calculate_selection_rate <- function(population_size) {
return(selection_constant*(population_size))
}
# Function to simulate evolution and return population sizes over generations
simulate_evolution <- function(initial_population, max_generations) {
population_sizes <- numeric(max_generations)
population <- initial_population
for (generation in 1:max_generations) {
# Store current population size
population_sizes[generation] <- population
# Calculate selection rate based on current population size
selection_rate <- calculate_selection_rate(population)
# Reduce population size based on selection rate
population <- population - selection_rate
# Break the loop if population becomes zero
if (population <= 0) {
cat("Population extinct at generation", generation, "\n")
break
}
}
return(population_sizes)
}
# Run the simulation
population_sizes <- simulate_evolution(initial_population, max_generations)
# Plot population size over generations
plot(1:max_generations, population_sizes, type = "l", xlab = "Generation", ylab = "Population Size", main = "Population Size Over Generations")
plot(log(1:max_generations), log(population_sizes)) #logarithmic relation
fnam <- paste0(curfolder,'/confirmatory/external_datasets/HawkinsFranketal2023_dataset/tangramsSequential.csv')
extdat <- read.csv(fnam)
length(unique(extdat$gameid))
